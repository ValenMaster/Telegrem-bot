import datetime as dt
import time
from random import randint

import requests
from telegram import ReplyKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, Filters, Updater

from Log_Talega import TOKEN
from Others import my_friends
from bots_functions import bots_functions, bots_future_functions
from dic_quest import around_world_easy, around_world_middle, inventions_easy, inventions_middle, \
    games_and_entertainment_easy, games_and_entertainment_middle, art_easy, art_middle

answer_no = ['no', '–Ω–µ—Ç', '–æ—Ç–≤—è–Ω—å', '–Ω–µ —Ö–æ—á—É', '–æ—Ç—Å—Ç–∞–Ω—å', '–Ω–µ –±—É–¥—É', '–ø–æ—Ç–æ–º']

sp_ans = []

sp_tasks_list = ['–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª:']
dic_for_new_func = {}

name_func_temporary = []

counter_points = []

sp_quest_stages = []  # ________________________________________________________________________________________________–ü–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
while len(sp_quest_stages) != 10:
    num = randint(1, 10)
    if num not in sp_quest_stages:
        sp_quest_stages.append(num)
print(sp_quest_stages)


def start(update,
          context):  # _________________________________________________________________________________________________–°—Ç–∞—Ä—Ç
    update.message.reply_text('üëã')
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å \n'
                              '–ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? \n'
                              '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /help', reply_markup=markup)
    print('/start')


def help(update,
         context):  # __________________________________________________________________________________________________–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
    update.message.reply_text('‚ùì')
    update.message.reply_text(bots_functions)


def plans_for_the_future(update,
                         context):  # __________________________________________________________________________–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ
    update.message.reply_text('‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')
    update.message.reply_text(bots_future_functions)


def dialoge(update,
            context):  # _______________________________________________________________________________________________–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ª–æ–≥
    update.message.reply_text('üó£')
    update.message.reply_text('–û–∫ \n'
                              '–î–∏–∞–ª–æ–≥ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è: \n'
                              '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: /stop')
    locality = update.message.text
    print(locality)
    update.message.reply_text(
        "–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?".format(**locals()))
    return 1_1


def first_response_dialoge(update, context):
    locality = update.message.text
    print(locality)
    if locality == '/skip':
        update.message.reply_text(
            "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å –∑–∞ –æ–∫–Ω–æ–º?".format(**locals()))
        return 1_2
    update.message.reply_text(
        "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {locality}?".format(**locals()))
    return 1_2


def second_response_dialoge(update, context):
    weather = update.message.text
    print(weather)
    update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏–º –¥–∏–∞–ª–æ–≥\n"
                              "–ü–æ–∫–∞ —è –Ω–µ —Å–∫–∞–∑–∞–ª —á–µ–≥–æ-—Ç–æ –ª–∏—à–Ω–µ–≥–æ...")
    return ConversationHandler.END


def random_cube(update,
                context):  # ___________________________________________________________________________________________–ö–∏–Ω—É—Ç—å 20-—Ç–∏ –≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
    update.message.reply_text('üé≤')
    cube = randint(1, 20)
    print(f'-----------------------')
    print(f'Random num (1, 20) = {cube}')
    update.message.reply_text(f"–≠—Ç–æ —á–∏—Å–ª–æ: {cube}")
    if cube <= 5:
        update.message.reply_text("üòÇ")
    elif 5 < cube <= 10:
        update.message.reply_text("üôÉ")
    elif 10 < cube <= 15:
        update.message.reply_text("üëè")
    elif 15 < cube <= 19:
        update.message.reply_text("üí™")
    else:
        update.message.reply_text("üñï")


def cube_battle(update,
                context):  # ___________________________________________________________________________________________–ë–∏—Ç–≤–∞ –Ω–∞ –∫—É–±–∏–∫–∞—Ö
    update.message.reply_text('üé≤ vs üé≤')
    cube_bot = randint(1, 20)
    cube_human = randint(1, 20)
    if cube_bot > cube_human:
        so_thats_mean = '–Ø –≤—ã–∏–≥—Ä–∞–ª'
        smile_rezult = 'ü§£'
    elif cube_bot < cube_human:
        so_thats_mean = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏'
        smile_rezult = 'üéâ'
    else:
        so_thats_mean = '–ù–∏—á—å—è!!'
        smile_rezult = 'üôÄ'
    print(f'-----------------------')
    print(f'Bot`s random num (1, 20) = {cube_bot}')
    print(f'Human`s random num (1, 20) = {cube_human}')
    update.message.reply_text(f"–≠—Ç–æ —á–∏—Å–ª–æ: {cube_human}\n"
                              f"–£ –º–µ–Ω—è —á–∏—Å–ª–æ: {cube_bot}\n"
                              f"{so_thats_mean}")
    update.message.reply_text(f"{smile_rezult}")


def remove_job_if_exists(name, context):
    """–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


# –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–∞–∫ –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ.
def set_timer(update,
              context):  # _____________________________________________________________________________________________–¢–∞–π–º–µ—Ä
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
    chat_id = update.message.chat_id
    update.message.reply_text('‚è±')
    try:
        # args[0] –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        # (—Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–µ—Ä–∞)
        due = int(context.args[0])
        if due < 0:
            update.message.reply_text(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–º–µ–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ')
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        # –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
        job_removed = remove_job_if_exists(
            str(chat_id),
            context
        )
        context.job_queue.run_once(
            task,
            due,
            context=chat_id,
            name=str(chat_id)
        )
        text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {due} —Å–µ–∫—É–Ω–¥!'
        if job_removed:
            text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
        # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å.
        update.message.reply_text(text)

    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_timer <—Å–µ–∫—É–Ω–¥>')


def task(context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    job = context.job
    context.bot.send_message(job.context, text='–í–µ—Ä–Ω—É–ª—Å—è!')


def unset_timer(update,
                context):  # ___________________________________________________________________________________–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª—Å—è —Å–µ–π—á–∞—Å!' if job_removed else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.'
    update.message.reply_text(text)


def time_now(update,
             context):  # ______________________________________________________________________________________________–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è
    update.message.reply_text(f'Now: {dt.datetime.now().time()}')


def date_now(update,
             context):  # ______________________________________________________________________________________________–í—ã–≤–æ–¥–∏—Ç –¥–∞—Ç—É
    update.message.reply_text(f'Today: {dt.datetime.now().date()}')


def stop():  # _________________________________________________________________________________________________________–°—Ç–æ–ø
    return ConversationHandler.END


def my_list(update,
            context):  # _______________________________________________________________________________________________–í—ã–≤–æ–¥ –°–ø–∏—Å–∫–∞
    sp_result = "\n".join(sp_tasks_list)
    update.message.reply_text('üìÇ')
    update.message.reply_text('üìÅ')
    update.message.reply_text(sp_result)


def fill_list(update,
              context):  # _____________________________________________________________________________________________–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –°–ø–∏—Å–∫–∞
    new_task = update.message.text
    update.message.reply_text(f'üìù')
    update.message.reply_text(f'–Ø –∑–∞–ø–∏—Å–∞–ª')
    try:
        sp_tasks_list.append(new_task.split(' ')[1])
    except IndexError:
        update.message.reply_text(f'–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏: /fill_list <–∑–∞–¥–∞—á–∞>')
    print(sp_tasks_list)


def del_list(update,
             context):  # ______________________________________________________________________________________________–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    del_task = update.message.text
    update.message.reply_text(f'üìù')
    update.message.reply_text(f'–£–¥–∞–ª–∏–ª —ç—Ç—É –∑–∞–¥–∞—á—É\n'
                              f'–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–∏ /my_list')
    try:
        sp_tasks_list.pop(int(del_task.split(' ')[1]))
    except IndexError:
        update.message.reply_text(f'–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏: /del_list <–∑–∞–¥–∞—á–∞>')
    print(sp_tasks_list)


def me_today(update,
             context):  # ______________________________________________________________________________________________"–¢—ã —Å–µ–≥–æ–¥–Ω—è..."
    sp_emg = ['üòÄ', 'ü§£', 'üôÉ', 'üòç', 'ü•∞', 'ü§™', 'üòé', 'üòí', 'üòñ', 'üò≠',
              'üò°', 'üò±', 'ü§î', 'üòê', 'üò¥', 'ü§ë', 'üòà', 'ü§°', 'ü§ñ', 'üßê']
    num_emg = randint(1, 20)
    update.message.reply_text("–¢—ã —Å–µ–≥–æ–¥–Ω—è...")
    update.message.reply_text(sp_emg[num_emg])


def create_func(update,
                context):  # ___________________________________________________________________________________________–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    update.message.reply_text('üëå')
    update.message.reply_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    return 2_1


def first_stage_of_creating(update, context):
    print('----------------------------------------')
    name = update.message.text
    print(name)
    dic_for_new_func[name] = 'New Func'
    name_func_temporary.append(name)
    update.message.reply_text(
        "–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è {name}?".format(**locals()))
    return 2_2


def second_stage_of_creating(update, context):
    about_func = update.message.text
    print(about_func)
    dic_for_new_func[name_func_temporary[-1]] = f'About: {about_func}'
    print(f'{name_func_temporary[-1]} -- {dic_for_new_func[name_func_temporary[-1]]}')
    update.message.reply_text(
        '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–µ–º—É –¥—Ä—É–≥—É —Ç–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n'
        '–ï—Å–ª–∏ –æ–Ω –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç, —Ç–æ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –º–æ–∏')
    return ConversationHandler.END


def map(update,
        context):  # ___________________________________________________________________________________________–í—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    update.message.reply_text('üîé')
    map_rec = update.message.text
    try:
        ans = map_rec.split(' ')[1]
        geocoder_request = f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&geocode={ans}&format=json"
        response = requests.get(geocoder_request)
        if response:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ json-–æ–±—ä–µ–∫—Ç
            json_response = response.json()

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–ø–æ–Ω–∏–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞.
            # –°–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é –æ—Ç–≤–µ—Ç–∞, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É—Ç–∏:
            toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
            # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–ø–æ–Ω–∏–º–∞:
            toponym_address = toponym["metaDataProperty"]["GeocoderMetaData"]["text"]
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ–ø–æ–Ω–∏–º–∞:
            toponym_coodrinates = toponym["Point"]["pos"]
            # –ü–µ—á–∞—Ç–∞–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—è:
            print(toponym_address, "–∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", toponym_coodrinates)
            update.message.reply_text(f'{toponym_address} –∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {toponym_coodrinates}')

            # static_api_request = f"https://static-maps.yandex.ru/1.x/?ll=37.677751,55.757718&spn=0.055,0.055&l=map"
            static_api_request = f"https://static-maps.yandex.ru/1.x/?ll={toponym_coodrinates}8&spn=0.055,0.055&l=map"
            context.bot.send_photo(
                update.message.chat_id,
                static_api_request,
                caption="–ù–∞—à—ë–ª:"
            )
    except IndexError:
        update.message.reply_text('–ù–∞–¥–æ —Ç–∞–∫: /map <–º–µ—Å—Ç–æ>')
    except BadRequest:
        print("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã(–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏)")


def others_about(update,
                 context):  # __________________________________________________________________________________________–ú–æ–∏ –¥—Ä—É–∑—å—è –∏ —Ç.–ø.
    update.message.reply_text("üòè")
    update.message.reply_text("–†–∞–¥, —á—Ç–æ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª!!")
    for i in range(len(my_friends)):
        update.message.reply_text(my_friends[i])
        time.sleep(1)


def quest(update,
          context):  # _________________________________________________________________________________________________–í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    update.message.reply_text(
        "–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n"
        "–í–≤–µ–ª–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è\n")
    return 1


def first_customization_quest(update,
                              context):  # _____________________________________________________________________________–ù–∞—Å—Ç—Ä–æ–π–∫–∏
    ans = update.message.text
    print(ans)
    if ans.lower() in answer_no:
        update.message.reply_text(
            "–ù—É –ª–∞–¥–Ω–æ\n"
            "–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –º–æ—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≤—ã –∑–Ω–∞–µ—Ç–µ –≥–¥–µ –º–µ–Ω—è –Ω–∞–π—Ç–∏\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
        return ConversationHandler.END
    else:
        update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞.")
        time.sleep(1)
        update.message.reply_text(
            "1. –í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞")
        time.sleep(1)
        update.message.reply_text(
            "2. –ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è")
        time.sleep(1)
        update.message.reply_text(
            "3. –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
        time.sleep(1)
        update.message.reply_text(
            "4. –ò—Å–∫—É—Å—Å—Ç–≤–æ")
        time.sleep(3)
        update.message.reply_text(
            "–ò—Ç–∞–∫, –≤–∞—à –≤—ã–±–æ—Ä...")
        return 2


def second_customization_quest(update, context):
    theme = update.message.text
    if theme == '1':
        sp_ans.append('–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞')
    elif theme == '2':
        sp_ans.append('–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è')
    elif theme == '3':
        sp_ans.append('–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
    elif theme == '4':
        sp_ans.append('–ò—Å–∫—É—Å—Å—Ç–≤–æ')
    else:
        sp_ans.append('–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞')
    print(theme)
    update.message.reply_text(
        "–•–æ—Ä–æ—à–æ")
    time.sleep(1)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    time.sleep(1)
    update.message.reply_text(
        "1. –õ–µ–≥–∫–æ")
    time.sleep(1)
    update.message.reply_text(
        "2. –ù–æ—Ä–º–∞–ª—å–Ω–æ")
    time.sleep(1)
    update.message.reply_text(
        "3. –°–ª–æ–∂–Ω–æ")
    time.sleep(2)
    update.message.reply_text(
        "–í–∞—à –≤—ã–±–æ—Ä...")
    return 3


def thrid_customization_quest(update,
                              context):  # _____________________________________________________________________–ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    level = update.message.text
    if level == '1':
        sp_ans.append('–õ–µ–≥–∫–æ')
    elif level == '2':
        sp_ans.append('–ù–æ—Ä–º–∞–ª—å–Ω–æ')
    else:
        sp_ans.append('–ù–æ—Ä–º–∞–ª—å–Ω–æ')
    print(level)
    update.message.reply_text(
        "–Ø –≤–∞—Å –ø–æ–Ω—è–ª")
    time.sleep(1)
    update.message.reply_text(
        "–ú—ã –º–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å")
    print(sp_ans)
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[0]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[0]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[0]}'])
    return 4


def first_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[0]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[1]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[1]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[1]}'])
    return 5


def second_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[1]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[2]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[2]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[2]}'])
    return 6


def third_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[2]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[3]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[3]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[3]}'])
    return 7


def forth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[3]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[4]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[4]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[4]}'])
    return 8


def fifth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[4]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[5]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[5]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[5]}'])
    return 9


def sixth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[5]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[6]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[6]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[6]}'])
    return 10


def seventh_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[6]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[7]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[7]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[7]}'])
    return 11


def eighth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[7]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[8]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[8]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[8]}'])
    return 12


def ninth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[8]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(around_world_easy[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(around_world_easy[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(around_world_middle[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(around_world_middle[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(inventions_easy[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(inventions_easy[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(inventions_middle[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(inventions_middle[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(games_and_entertainment_easy[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(games_and_entertainment_easy[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(games_and_entertainment_middle[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(games_and_entertainment_middle[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        update.message.reply_text(art_easy[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(art_easy[f'variants{sp_quest_stages[9]}'])
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        update.message.reply_text(art_middle[f'{sp_quest_stages[9]}.'])
        update.message.reply_text(art_middle[f'variants{sp_quest_stages[9]}'])
    return 13


def tenth_question(update, context):
    ans = update.message.text
    key_dic = f'ans{sp_quest_stages[9]}'
    if sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == around_world_easy[key_dic][0] or ans == around_world_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–í–æ–∫—Ä—É–≥ —Å–≤–µ—Ç–∞' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == around_world_middle[key_dic][0] or ans == around_world_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = around_world_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == inventions_easy[key_dic][0] or ans == inventions_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == inventions_middle[key_dic][0] or ans == inventions_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = inventions_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == games_and_entertainment_easy[key_dic][0] or ans == games_and_entertainment_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == games_and_entertainment_middle[key_dic][0] or ans == games_and_entertainment_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = games_and_entertainment_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–õ–µ–≥–∫–æ':
        if ans == art_easy[key_dic][0] or ans == art_easy[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_easy[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    elif sp_ans[0] == '–ò—Å–∫—É—Å—Å—Ç–≤–æ' and sp_ans[1] == '–ù–æ—Ä–º–∞–ª—å–Ω–æ':
        if ans == art_middle[key_dic][0] or ans == art_middle[key_dic]:
            update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')
            counter_points.append('+')
        else:
            update.message.reply_text('–ù–µ—Ç')
            right_ans = art_middle[key_dic]
            update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_ans}')
    points = len(counter_points) * 10
    update.message.reply_text(f'–í –∏—Ç–æ–≥–µ –≤—ã –Ω–∞–±—Ä–∞–ª–∏: {points} –±–∞–ª–ª–æ–≤.')
    return ConversationHandler.END


def main():  # _________________________________________________________________________________________________________Main()
    updater = Updater(TOKEN, use_context=True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start. –û–Ω–∞ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
        entry_points=[CommandHandler('dialoge', dialoge)],
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            1_1: [MessageHandler(Filters.text, first_response_dialoge)],
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
            1_2: [MessageHandler(Filters.text, second_response_dialoge)]
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("random_cube", random_cube))
    dp.add_handler(CommandHandler("cube_battle", cube_battle))
    dp.add_handler(CommandHandler("set_timer", set_timer))
    dp.add_handler(CommandHandler("unset_timer", unset_timer))
    dp.add_handler(CommandHandler("my_list", my_list))
    dp.add_handler(CommandHandler("fill_list", fill_list))
    dp.add_handler(CommandHandler("del_list", del_list))
    dp.add_handler(CommandHandler("me_today", me_today))

    new_func = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        entry_points=[CommandHandler('create_func', create_func)],

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            2_1: [MessageHandler(Filters.text, first_stage_of_creating)],
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
            2_2: [MessageHandler(Filters.text, second_stage_of_creating)]
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )

    dp.add_handler(CommandHandler("map", map))
    dp.add_handler(CommandHandler("time_now", time_now))
    dp.add_handler(CommandHandler("date_now", date_now))
    dp.add_handler(CommandHandler("others_about", others_about))
    dp.add_handler(CommandHandler("plans_for_the_future", plans_for_the_future))
    dp.add_handler(conv_handler)
    dp.add_handler(new_func)
    # Quest

    quest_history = ConversationHandler(
        entry_points=[CommandHandler('quest', quest)],
        states={
            1: [MessageHandler(Filters.text, first_customization_quest)],
            2: [MessageHandler(Filters.text, second_customization_quest)],
            3: [MessageHandler(Filters.text, thrid_customization_quest)],
            4: [MessageHandler(Filters.text, first_question)],
            5: [MessageHandler(Filters.text, second_question)],
            6: [MessageHandler(Filters.text, third_question)],
            7: [MessageHandler(Filters.text, forth_question)],
            8: [MessageHandler(Filters.text, fifth_question)],
            9: [MessageHandler(Filters.text, sixth_question)],
            10: [MessageHandler(Filters.text, seventh_question)],
            11: [MessageHandler(Filters.text, eighth_question)],
            12: [MessageHandler(Filters.text, ninth_question)],
            13: [MessageHandler(Filters.text, tenth_question)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(quest_history)

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    reply_keyboard = [['/help']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    print('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start')
    main()
